import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import type { RootState } from "../store";

// here we are typing the types for the state
export type AuthState = {
  data: { quote: string };
  pending: boolean;
  error: boolean;
};

const initialState: AuthState = {
  data: { quote: "click that button" },
  pending: false,
  error: false,
};

// This action is what we will call using the dispatch in order to trigger the API call.
export const getUser = createAsyncThunk("kanye/kanyeQuote", async () => {
  const response = await axios.get("https://api.kanye.rest/");

  return response.data;
});

export const slice = createSlice({
  name: "kanye",
  initialState,
  reducers: {
    // leave this empty here
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes.
  // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
  extraReducers: (builder) => {
    builder
      .addCase(getUser.pending, (state) => {
        state.pending = true;
      })
      .addCase(getUser.fulfilled, (state, { payload }) => {
        // When the API call is successful and we get some data,the data becomes the `fulfilled` action payload
        state.pending = false;
        state.data = payload;
      })
      .addCase(getUser.rejected, (state) => {
        state.pending = false;
        state.error = true;
      });
  },
});

export const selectUser = (state: RootState) => state.auth;

export default slice.reducer;
